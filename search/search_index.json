{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to rag_kmk","text":"<p>A simple RAG implementation for educational purposes implemented by Murat Karakaya Akademi</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://kmkarakaya.github.io/rag-kmk</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#retrieve-google_api_key-from-system-environment-variables","title":"Retrieve GOOGLE_API_KEY from system environment variables","text":"<ul> <li>Needs a GOOGLE API KEY stored in the system environment variables as GOOGLE_API_KEY or you can enter your key when requested.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/kmkarakaya/rag-kmk/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>rag-kmk could always use more documentation, whether as part of the official rag-kmk docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/kmkarakaya/rag-kmk/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up rag-kmk for local development.</p> <ol> <li> <p>Fork the rag-kmk repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/rag-kmk.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv rag-kmk\n$ cd rag-kmk/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 rag-kmk tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/kmkarakaya/rag-kmk/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"document_loader/","title":"document_loader module","text":""},{"location":"document_loader/#rag_kmk.knowledge_base.document_loader.build_knowledge_base","title":"<code>build_knowledge_base(document_directory_path)</code>","text":"<p>Loads document from a specified directory. Supported file types are defined in CONFIG['supported_file_types']. Currently supports .txt, .pdf, and .docx files.</p> <ul> <li>directory_path (str): The path to the directory containing the document to be loaded.</li> </ul> <ul> <li>list: A list of document contents as strings.</li> </ul> Source code in <code>rag_kmk/knowledge_base/document_loader.py</code> <pre><code>def build_knowledge_base(document_directory_path):\n    \"\"\"\n    Loads document from a specified directory. Supported file types are defined in CONFIG['supported_file_types'].\n    Currently supports .txt, .pdf, and .docx files.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the document to be loaded.\n\n    Returns:\n    - list: A list of document contents as strings.\n    \"\"\"\n\n    #chroma_client, chroma_collection = create_chroma_client(CONFIG[\"vector_db\"][\"chromaDB_path\"])\n    chroma_client, chroma_collection = create_chroma_client()\n\n    current_id = chroma_collection.count()\n    print(f\"Current Number of Document Chunks in Vector DB : {current_id}\")\n\n\n    if not os.path.isdir(document_directory_path):\n        print(f'{document_directory_path} is not a directory.')\n        return\n\n\n    for filename in os.listdir(document_directory_path):\n        file_path = os.path.join(document_directory_path, filename)\n        file_extension = os.path.splitext(filename)[1]\n\n        document = []\n\n        if file_extension in CONFIG['supported_file_types']:\n            try:\n                if file_extension == '.txt':\n                    with open(file_path, 'r') as file:\n                        document = file.read()\n                    document.append(document)\n                    print(f'\\nText document {filename} loaded successfully from {file_path}')\n                elif file_extension == '.pdf':\n                    with fitz.open(file_path) as doc:\n                        text = ''\n                        for page in doc:\n                            text += page.get_text()\n                    document.append(text)\n                    print(f'\\nPDF document {filename} loaded successfully from {file_path}')\n                elif file_extension == '.docx':\n                    doc = Document(file_path)\n                    text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                    document.append(text)\n                    print(f'\\nDOCX document {filename} loaded successfully from {file_path}')\n\n                print(f\"Processing the document {filename} to add to the {chroma_collection.name} collection\")\n                print(f\"Current number of document chunks in Vector DB: {chroma_collection.count()} \")\n                text_chunksinChar = convert_Pages_ChunkinChar(document)\n                text_chunksinTokens = convert_Chunk_Token(text_chunksinChar)\n                ids,metadatas = add_meta_data(text_chunksinTokens,filename, current_id)\n                current_id = current_id + len(text_chunksinTokens)\n                chroma_collection = add_document_to_collection(ids, metadatas, text_chunksinTokens, chroma_collection)\n                print(f\"Document {filename} added to the collection\")\n                print(f\"Current number of document chunks in Vector DB: {chroma_collection.count()} \")\n\n\n\n            except Exception as e:\n                print(f'\\nFailed to load document from {file_path}: {e}')\n        else:\n            print(f'\\nSkipping unsupported file type: {file_path}')\n\n    print(f'\\nKnowledge Based populated by a total number of {chroma_collection.count()} document chunks from {document_directory_path}.')\n    return chroma_collection\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install rag-kmk, run this command in your terminal:</p> <pre><code>pip install rag-kmk\n</code></pre> <p>This is the preferred method to install rag-kmk, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install rag-kmk from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/kmkarakaya/rag-kmk\n</code></pre>"},{"location":"run_rag_kmk/","title":"run_rag_kmk module","text":""},{"location":"usage/","title":"Usage","text":"<p>To use rag-kmk in a project:</p> <pre><code>#pip install rag-kmk\nfrom rag_kmk.knowledge_base import build_knowledge_base  \nfrom rag_kmk.vector_db import summarize_collection \nfrom rag_kmk.chat_flow import RAG_LLM, run_rag_pipeline    \n\ndef main():\n    knowledge_base= build_knowledge_base(r'.\\files')  \n    summarize_collection(knowledge_base) \n    run_rag_pipeline(RAG_LLM,knowledge_base)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>#pip install rag-kmk\nfrom rag_kmk.knowledge_base import build_knowledge_base  \nfrom rag_kmk.vector_db import summarize_collection \nfrom rag_kmk.chat_flow import RAG_LLM, run_rag_pipeline    \n\ndef main():\n    knowledge_base= build_knowledge_base(r'.\\files') \n    if knowledge_base is None:\n        print('No knowledge base created. Exiting')\n        return \n    summarize_collection(knowledge_base) \n    run_rag_pipeline(RAG_LLM,knowledge_base)\n\nif __name__ == \"__main__\":\n    main()\n</pre> #pip install rag-kmk from rag_kmk.knowledge_base import build_knowledge_base   from rag_kmk.vector_db import summarize_collection  from rag_kmk.chat_flow import RAG_LLM, run_rag_pipeline      def main():     knowledge_base= build_knowledge_base(r'.\\files')      if knowledge_base is None:         print('No knowledge base created. Exiting')         return      summarize_collection(knowledge_base)      run_rag_pipeline(RAG_LLM,knowledge_base)  if __name__ == \"__main__\":     main() <pre>RAG-KMK initialized with config\n</pre> <pre>/home/runner/.local/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> <pre>--------------------- LOOKING FOR GOOGLE GEMINI KEY --------------------- \n\nRetrieving Google Gemini API Key as GEMINI_API_KEY or GOOGLE_API_KEY from system environment variables...\nGoogle Gemini API Key not found in system environment variables.\nNot found in environment variables. Checking .env file...\nRetrieving Google Gemini API Key from .env file...\n.env file not found.\nGoogle Gemini API Key not found in .env file.\nInvalid Key\nAPI key from .env file is not valid. Correct it for the next time please!\n</pre> <pre>/home/runner/.local/lib/python3.11/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n</pre> <pre>Using in-memory Client\nCollection rag_collection does not exist\nCreating a new collection\nCurrent Number of Document Chunks in Vector DB : 0\n.\\files is not a directory.\nNo knowledge base created. Exiting\n</pre>"}]}